What is an Index in SQL (or in General)?
--> stores reference of some data -- so that the db can easliy locate those row
like create index on employees

an index is a data structure  improves data retreival speed  on a database or a collection.
You can think of an index like a book index — a list of topics or keywords associated with page numbers,
allowing you to quickly locate information without scanning the whole book.

Index in SQL
In SQL databases, an index is created on a table's columns to speed up queries.
When you search or retrieve data from a table (using a SELECT query, for example),
the database can look up the index rather than scanning each row of the table.
This reduces the time and computational cost of querying large datasets.

Indexes are created to improve performance, especially in SELECT queries involving WHERE, JOIN, or ORDER BY clauses.
However, they come with a cost: maintaining indexes requires additional storage, a
nd they may slow down write operations like INSERT, UPDATE, or DELETE, as the index must be updated along with the data.

Key Types of Indexes in SQL:
Clustered Index: Organizes the physical storage of data in the table based on the indexed column(s).
A table can have only one clustered index, as it determines the order in which the rows are stored.

Non-Clustered Index: Creates a separate structure from the table where it stores the indexed columns
and pointers to the actual rows in the table. A table can have multiple non-clustered indexes.

Unique Index: Ensures that all values in the indexed column(s) are unique.
It automatically gets created when a column is defined with the UNIQUE constraint.

Composite Index: An index that is built on multiple columns.
It helps queries that filter data based on combinations of these columns.

Example in SQL:
sql

-- Creating an index on the "email" column of the "users" table
CREATE INDEX idx_users_email ON users(email);
In this example, searching by email (WHERE email = 'example@example.com') will be faster because the database can quickly
look up the value in the index rather than scanning every row.

Index in General Computing Terms
In computing, an index refers to any data structure that maps keys or identifiers to associated values.
The most common example is an array index. When you have an array (or list) of items,
an index is the position of an element within that array.
It allows for fast access to elements without scanning the entire collection.

For example, in Python:

python
Copy code
arr = [10, 20, 30, 40]
print(arr[2])  # Output: 30
Here, the index 2 is used to directly access the element at that position, which is 30.

In summary, whether in SQL or in general computing,
an index is a tool to optimize the retrieval of data, providing faster access based on an ordered or mapped structure.


Lets take an example
you have a db --- > users
| id      | name    | email                                       |
| ------- | ------- | ------------------------------------------- |
| 1       | Alice   | [alice@mail.com](mailto:alice@mail.com)     |
| 2       | Bob     | [bob@mail.com](mailto:bob@mail.com)         |
| 3       | Charlie | [charlie@mail.com](mailto:charlie@mail.com) |
| 4       | David   | [david@mail.com](mailto:david@mail.com)     |
| ...     | ...     | ...                                         |
| 1000000 | Zach    | [zach@mail.com](mailto:zach@mail.com)       |

SELECT * FROM users WHERE email = 'bob@mail.com';

The database starts from the first row and checks the email column one by one.
Even if the match is early, it keeps scanning till the end (or until it’s sure no duplicates exist depending on engine).
Time complexity: O(n), where n is the number of rows.

[Row 1] -- no match
[Row 2] -- ✅ match found
[Row 3] -- check
[Row 4] -- check
...
[Row 1,000,000] -- check

======================== With an index =============

CREATE INDEX idx_users_email ON users(email);
with an index  the DBMS creates a separate data structure (usually a B-tree) to map email → row reference.
Index (B-Tree):
-----------------------------
alice@mail.com   → Row 1
bob@mail.com     → Row 2
charlie@mail.com → Row 3
david@mail.com   → Row 4
...
zach@mail.com    → Row 1,000,000

DB jumps to the B-tree index, does a binary search or tree traversal
Time complexity: O(log n) – very fast!