Maven is software managemnet tool- it manages ur dependencies and versions
For example build a jar file ,, run unit and itegration tests deploy
Maven helps in all of these

Pom.xml or Project Object Model
1. Maven Dependencies : frameworks and libraries used in this project
<dependecies><dependecies> you have in ur project

2. Parent Pom is like --  which version of spring framework spring boot we are using and what all dependecies we are getting
dependenices and java version plugins and configurations

Name Of our Project : group id  and artifact id and also the version of our app
So if any other project wants to make use of our project, they can use this group ID, artifact ID,and you can also have a version.

BuildLifecycle for our maven
validate: validate the project configuration
compile: compile the source code
test: run tests against the compiled source code
package: package the compiled code into a JAR, WAR or EAR file
verify: perform checks on the packaged code to ensure its integrity
install: install the packaged code in the local repository
deploy: deploy the packaged code to a remote repository

What is Semantic Versioning?
Semantic versioning uses a MAJOR.MINOR.PATCH structur

Version In Maven
1.0.0 [major.minor.patch] major -- Breaking Chnges like entire Api DEsign, minor --> new endpoint , patch --> bug fixes
1.1.2
1.2.3
major -- siginficant amout of work
minor -- little work required for upgrade
pacth -- no work to upgrade

Snapshots -- so when you createa feature or wroking on a feature u release a snaps hot version and work
when u merge to master u align with the master -- we have pluging inside maven which will automatcally increae the pom version
under development should not take snapshots
10.0.0-SNAPSHOT -- under development --
10.0.0-M1 -- milestone
10.0.0 -- Released

 Maven Enforcer Plugin
 To make use of the plugin in our project, we need to add the following dependency to our pom.xml:
 <plugin>
     <groupId>org.apache.maven.plugins</groupId>
     <artifactId>maven-enforcer-plugin</artifactId>
     <version>3.0.0-M2</version>
 </plugin>

 Maven Enforcer has two goals: enforcer:enforce and enforcer:display-info.

 The enforce goal runs during a project build to execute rules specified in the configuration,
 while the display-info goal shows current information about the built-in rules that are present in the projectâ€™s pom.xml.

 ...
 <executions>
     <execution>
         <id>enforce</id>
         <goals>
             <goal>enforce</goal>
         </goals>
         <configuration>
             <rules>
                 <banDuplicatePomDependencyVersions/>
             </rules>
         </configuration>
     </execution>
 </executions>
 ...

 




