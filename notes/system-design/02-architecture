Technical stack about our application
Java 17 recently migrated from java8
Framework - MOJ internal framework
Build tool - maven
Database - Postgresql
Testing: JUnit for testing
Containerization: Docker support (visible in docker directory)


Our 40+ Java microservices are containerized using WildFly and deployed to AKS.
 We use Azure APIM to manage SOAP and REST access securely.
Frontend UI runs in its own pod and communicates with backend via REST.
Internally, services talk via DNS and Kubernetes services, and we use Artemis and PostgreSQL inside containers.
CI/CD is managed via Azure DevOps using Helm and ACR.
Monitoring and auditing are handled through Azure Monitor, Application Insights, and Prometheus.
Every service is independently versioned and designed around domain responsibilities.

Thee entire solution/applicatoo is hosted on Azure (Strategic Cloud Platform).

It uses a 3-tier architecture:
API & Web Tier: Exposed via API Gateway and Angular SPA
App Tier: Java EE microservices deployed on WildFly (e.g., SPI WARs)
Data Tier: PostgreSQL used as the event store and view store

2.How External Systems Talk to Us?
  External entities like Police or CJS ExiSS DVLA system communicate via:

  SOAP Web Services (WSDL-based) or rest service

  These calls come through Azure API Gateway
  API Gateway routes requests into the SPI microservices (Staging context)

  Azure API Management is a gateway + facade in front of your APIs. -- got to azure folder for apim knowledee
  its amnaged service by azure, it helps in
  Routes incoming requests to correct backend service,
  convert the payload from xml to josn or vice versa
  security -- Injects headers, API keys, OAuth2 tokens
  Rate Limiting	Controls external traffic volume
  Monitoring & Logs	Captures traffic, response times, errors

  so when the saop message commes in via the API
  Azure APIM:
  Matches the WSDL operation to a policy
  Validates the schema
  Logs the request
  May transform SOAP to JSON if needed:
  {
    "hearingId": "H123",
    "courtId": "C001",
    "date": "2025-06-10"
  }
Forwards to internal endpoint: frontend mciroservice

Security middleware these are apim policies
<policies>
  <inbound>
    <set-header name="x-correlation-id" exists-action="override">
      <value>@(context.RequestId)</value>
    </set-header>
    <set-header name="Authorization" exists-action="override">
      <value>Bearer <token></value>
    </set-header>
  </inbound>
</policies>

3 routed back to the backend service
/staging-spi/schedule-hearing
Hits SPICommandHandler.scheduleHearing()
Business logic applied
Events are stored â†’ view is update


Similar scenario
Court Admin uses Angular SPA to resolve an error
POST /commands/schedule
Content-Type: application/json

{
  "hearingId": "H123",
  "courtId": "C001",
  "date": "2025-06-10"
}

Azure API Gateway (REST mode):
Validates JWT token
Injects tracing headers
Routes to internal REST controller

