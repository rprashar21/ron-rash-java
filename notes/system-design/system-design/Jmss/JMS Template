JmsTemplate hides all teh complexities to avoid connectionfactory and session and other stuff
its an abstarction

// applicatiom.properties
springjms.Myqueuue=myquque


// this is the producer
@Component
class MessageSender{


@Autowired
JmsTempalte jmsTemplate;

@Value("${springjms.Myqueuue}")
private String queue;

     public void sendMessage(final Message message){
       jmsTemplate.convertAndSend(queue,message)
     }
}

// consumer
class MyListener{

@JmsListener(destination="${springjms.Myqueuue}")
public void receive(String message){
sout("message recived")
}
}

====== Jms Messages ======
Header--destination, deliverymode ,messageid,

providerc--timestamp,expiration,redelivered,priority,

developer
replyto , correlationid, type =====


Jms Messaging -- request and reply ---
we can create a queue manually or  dynamically
how to map request and reply queue
when we send a message via a request that has a jmsMessageid
when we send back a reply we can set correlationid as the jmsMessage id

eg. JmsProducer producer = jmsContext.createProducer()
    jmsproducer.send(new Message("hello")) // this message will have a jmsMessageId
    sout(message.getJmsMessageId())

    JmsConsumer consumer = jmsContext.createComsumer()
    Message messageConsumed= consumer.recieve() // this message will have a jmsMessageId
     sout(messageConsumed)

  //sending message back
     JmsProducer producer = jmsContext.createProducer()
     Message message = jmsContext.createMessage()
     message.setCorrelationId(messageConsumed.getJmsMessageId())
     producer.send(message)

 //////++++++++++++++++

 setMessageExpiry
JmsMessage move the expired messages to expiryQueue -- u can access teh message from the expiryqieueu

setDeliveryDelay(); -- u can set the delay as well


Add custom message properties to the message
Message can be of many types string,object,stream,map,byte
jmsContext,createTextMessage,byteMessage


=============P2P ======
when 2 use -- oneto one -- like login,bank and atm machine ,improve performance ,,increase queues when load is heavy

Message Acknowledgement
once u send the message , the consumer has consumed ,, if u resend u will no meessage becoz it has been consumed and removed from queue
there is an aautomactic understanding from the jms server that message has been consumed

whereas in client ie consumer acknowledgement-- the client has to specify only then the jms provide will say the message has been consumed
like  message.acknowledge

== code for all of these

Producer code

class MessageProdcuer{

      psvm(){
       InitialContext context = new InitialContext();
       Queue requestQueue = context.lookup("queue/requestQueue")
       // other stuff
       try(ActiveMqConnectionfactory cf = new ActiveMqConnectionFactory()){
          JMSContext jmsContext = cf.createContext(JMS.SESSION_TRANSACTED) // this for a transaction only when its is commited the message will be sent to the jms server

        var JmsProdcuer jmsProdcuer=  jmsContext.createProdcuer();
         jmsProdcuer.send("requestQueue","Message 1");
         jmsProdcuer.send("requestQueue","Message 1");

         jms.commit();
       }
      }
}

