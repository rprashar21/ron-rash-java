npx create-react-app myapp
when we install node we also install npm -- node package manager -- similar to maven
npm start -- runs the development server
npm run -- build bundles the app into static files for production
npm test  -- starts the test runner

folder structure
package.json -- has all the dependencies
start -- starts the dev server
build -- npm run build {creates the prod ready build }

public folder - it also has all the stati ontents of my folder
 index.html --> file which is displayed
 the entire app lives in the root div

 index.js --> getthe root element of the div

 Components- They start with capital letters,similar to functions an dmust return some html content called jsx under the hood
 function Greeting(){
 <h1>My first component</h1>
 }

 Jsx Rules
 close all the attributes
 returns a single parent element
 use camelccase for html attribute and use className instead of class

 JS in JSX
 {} --> this should only return a value not an expression

 named import {}
 ClassName of the components  should be in capital

 What are hooks --? useState useEffect,useContext,UseReducer
 they start with use
 component must be uppercase
 must be invoked inside a function/component body
 set functions dont update the state immedialtely

 #useState->
1. useState is a function from react which returns an array with 2 elements the current state value and the function whichcontrols that value
we pass a default value to the function,baiscally  we will set up the state and the state is preserved between re renders
2. should be used inside a function body
3. it preserves the value between re-renders
4. and also runs the re-render hook
 cannot call hooks conditionally
 if(use*) --> not possible
 const value = useState(1)[0]; --1 is the current state with default value and second argument is the function
  const value = useState(1)[1];
 // we will use destructuring --> const [count,setCount] = useState(1);  this is basically destructuring

 Rerenders -- when the application loads for the first time the component rerenders
 when the state or props changes then also the componenst reredner-and the component needs to be updated in the dom to refelect these changes
 React uses a  virtual dom to optimize the process of updating the dom ,so only the necessary changes are updated

 General rule for hooks


#useEffect -- hook is used for work outside the component
When we want to use some side effects , like fetching the data from outside
we setup a callback function inside the useEffect and some functionality inside it to run every time we re-render it
by default it runs after every re-render
Every time we update the value of the state we run the useEffect.

useEffect(()=>{
  // runs every time state value updates

})

useEffect(()=>{
  // runs first time

},[]) --> enter the empty array

useEffect(()=>{
  // runs first time and every time the value dependency changes

},[value]) --> every time the
// cleanup function
useEffect(()=>{
  // runs first time and every time the value dependency changes

  // clean up function is called whenever we call the useEffect the second setTimeout(function () {
      return ()=>{

      };
});

// second parameter
fetch tutorial -->
useEffect(()=>{
  // runs first time
    const getUsers = async () =>{
      const response = await fetch(url)
      const users = await response.json();
      // setting in the state value
      setUsers(users)
    }
},[]) --> this useEffect will be called only once


# axios is used to fetch data
